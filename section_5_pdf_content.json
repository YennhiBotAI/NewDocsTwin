{
  "section_name": "Section 5 - API Documentation",
  "total_pages": 16,
  "all_text": "5. DÀNH CHO NHÀ PHÁT TRIỂN\n(TwinExpert API Documentation)\nTích hợp AI twins vào ứng dụng của bạn với API RESTful mạnh mẽ và dễ sử dụng.\nBắt Đầu Lấy API Key\nBảo mật\n1\n\n5.1. Bắt đầu với API\nHướng dẫn nhanh để bắt đầu sử dụng TwinExpert API\nBase URL\nhttps://api.twinexpert.com/api/v1\nTất cả API endpoints đều sử dụng base URL trên\nTạo tài khoản Tạo API Key\nĐăng ký tài khoản miễn phí trên TwinExpe Vào dashboard và tạo API key trong phần\ncài đặt\nĐăng ký ngay\nTạo API Key\nGọi API đầu tiên Tích Hợp\nSử dụng API key để gọi endpoint đầu tiên Tích hợp API vào ứng dụng của bạn\nXem ví dụ API Reference\n2\n\n5.2. Xác thực\nTwinExpert API sử dụng API key để xác thực requests\nBảo mật API Key\nAPI key của bạn có quyền truy cập vào dữ liệu. Hãy giữ bí mật và không chia sẻ trong\ncode phía client.\nCách sử dụng API Key\nThêm API key vào header Authorization của mọi request:\nAuthorization Header\nAuthorization: Bearer YOUR_API_KEY\nHoặc sử dụng X-API-Key header\nX-API-Key: YOUR_API_KEY\nPost\n/api/v1/auth/api-keys\n<>Ví dụ code\nTạo API key mới bằng JWT token\n3\n\nJavaScript\n// Tạo API key mới\nconst response = await\nfetch('https://api.twinexpert.com/api/v1/auth/api-keys', {\nmethod: 'POST',\nheaders: {\n'Authorization': 'Bearer YOUR_JWT_TOKEN',\n'Content-Type': 'application/json'\n},\nbody: JSON.stringify({\nname: 'My App',\nscope: 'full_access'\n})\n});\nconst data = await response.json();\nconsole.log('API Key:', data.data.key);\ncURL\n# Tạo API key mới\ncurl -X POST \"https://api.twinexpert.com/api/v1/auth/api-keys\" \\\n-H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n\"name\": \"My App\",\n\"scope\": \"full_access\"\n}'\n4\n\nPython\nimport requests\n# Tạo API key mới\nheaders = {\n'Authorization': 'Bearer YOUR_JWT_TOKEN',\n'Content-Type': 'application/json'\n}\ndata = {\n'name': 'My App',\n'scope': 'full_access'\n}\nresponse = requests.post(\n'https://api.twinexpert.com/api/v1/auth/api-keys',\nheaders=headers,\njson=data\n)\napi_key = response.json()['data']['key']\nprint(f'API Key: {api_key}')\nPhạm vi quyền (Scopes)\nread_only Chỉ Đọc full_access Chỉ Đọc\nXem danh sách Twins Tất cả quyền của Read_only\nĐọc thông tin cuộc trò chuyên Tạo cuộc trò chuyện mới\nXem lịch sử tin nhắn Gửi tin nhắn 500 requests/giờ\n200 requests/giờ\n5\n\n5.3. API Endpoints\nDanh sách đầy đủ các endpoints có sẵn\nGET /api/v1/twins Chỉ đọc\nLấy danh sách Twins có thể truy cập\nParameters\nSố trang (1-based)\npage\ninteger\ninteger Số items mỗi trang (max 100)\nlimit\nGET /api/v1/twins/{id} Chỉ đọc\nLấy thông tin chi tiết twin\nParameters\nstring required ID của twin\nid\nPOST /api/v1/twins/{id} Toàn quyền\nTạo cuộc trò chuyện mới\nParameters\ntwinId string required\nID của twin\ntitle string Tiêu đề cuộc trò chuyện\n6\n\nGET /api/v1/conversations Chỉ đọc\nLấy danh sách cuộc trò chuyện\nParameters\nSố trang\npage\ninteger\ninteger Số items mỗi trang\nlimit\ntwinId string Lọc theo twin ID\nPOST /api/v1/conversations/{id}/messages Toàn quyền\nGửi tin nhắn\nParameters\nstring required ID cuộc trò chuyện\nid\nstring required Nội dung tin nhắn\ncontent\nPOST Toàn quyền\n/api/v1/conversations/{id}/messages/stream\nGửi tin nhắn với phản hồi streaming\nParameters\nstring required ID cuộc trò chuyện\nid\nstring required Nội dung tin nhắn\ncontent\n7\n\n5.4. Ví dụ\nCác ví dụ code thực tế để bắt đầu nhanh\n1. Lấy danh sách AI Twins\nXem tất cả AI twins mà bạn có thể truy cập\nGET\n/api/v1/twins\nThử nghiệm API\nAPI Key\n123456\nKết quả\n{\n\"statusCode\": 401,\n\"timestamp\": \"2025-07-23T17:06:03.675Z\",\n\"path\": \"/api/v1/twins\",\n\"method\": \"GET\",\n\"message\": \"Invalid API key format\",\n\"error\": \"Unauthorized\"\n}\n<> Ví dụ code\nLấy danh sách twins có thể truy cập\n8\n\nJavaScript\n// Lấy danh sách twins\nconst response = await\nfetch('https://api.twinexpert.com/api/v1/twins', {\nheaders: {\n'Authorization': 'Bearer 123456',\n'Content-Type': 'application/json'\n}\n});\nconst twins = await response.json();\nconsole.log('Available twins:', twins.data);\nPython\nimport requests\n# Lấy danh sách twins\nheaders = {\n'Authorization': 'Bearer 123456',\n'Content-Type': 'application/json'\n}\nresponse = requests.get(\n'https://api.twinexpert.com/api/v1/twins',\nheaders=headers\n)\ntwins = response.json()['data']\nprint(f'Found {len(twins)} twins')\ncURL\n# Lấy danh sách twins\ncurl -X GET \"https://api.twinexpert.com/api/v1/twins\" \\\n-H \"Authorization: Bearer 123456\" \\\n-H \"Content-Type: application/json\"\n9\n\n2. Chat với AI Twin\nTạo cuộc trò chuyện và gửi tin nhắn đến AI twin\nGET /api/v1/conversations\n<> Ví dụ code\nTạo cuộc trò chuyện và gửi tin nhắn đến AI twin\n10\n\nJavaScript\n// Tạo cuộc trò chuyện và gửi tin nhắn\nasync function chatWithTwin(twinId, message) {\n// 1. Tạo cuộc trò chuyện mới\nconst conversationResponse = await\nfetch('https://api.twinexpert.com/api/v1/conversations', {\nmethod: 'POST',\nheaders: {\n'Authorization': 'Bearer YOUR_API_KEY',\n'Content-Type': 'application/json'\n},\nbody: JSON.stringify({\ntwinId: twinId,\ntitle: 'API Chat Session'\n})\n});\nconst conversation = await conversationResponse.json();\nconst conversationId = conversation.data.id;\n// 2. Gửi tin nhắn\nconst messageResponse = await\nfetch(`${process.env.NEXT_PUBLIC_API_URL}/api/v1/conversations/${con\nversationId}/messages`, {\nmethod: 'POST',\nheaders: {\n'Authorization': 'Bearer YOUR_API_KEY',\n'Content-Type': 'application/json'\n},\nbody: JSON.stringify({\ncontent: message\n})\n});\nconst result = await messageResponse.json();\nreturn result.data;\n}\n// Sử dụng\nchatWithTwin('twin-id', 'Xin chào!').then(result => {\nconsole.log('Response:', result);\n});\n11\n\nPython\nimport requests\nclass TwinExpertAPI:\ndef __init__(self, api_key):\nself.api_key = api_key\nself.base_url = 'https://api.twinexpert.com/api/v1'\nself.headers = {\n'Authorization': f'Bearer {api_key}',\n'Content-Type': 'application/json'\n}\ndef create_conversation(self, twin_id, title=\"API Chat\"):\nresponse = requests.post(\nf'{self.base_url}/conversations',\nheaders=self.headers,\njson={'twinId': twin_id, 'title': title}\n)\nreturn response.json()['data']\ndef send_message(self, conversation_id, message):\nresponse = requests.post(\nf'{self.base_url}/conversations/{conversation_id}/messages',\nheaders=self.headers,\njson={'content': message}\n)\nreturn response.json()['data']\ndef chat_with_twin(self, twin_id, message):\n# Tạo cuộc trò chuyện\nconversation = self.create_conversation(twin_id)\n# Gửi tin nhắn\nresult = self.send_message(conversation['id'], message)\nreturn result\n# Sử dụng\napi = TwinExpertAPI('YOUR_API_KEY')\nresponse = api.chat_with_twin('twin-id', 'Xin chào!')\nprint(response)\n12\n\ncURL\n# 1. Tạo cuộc trò chuyện mới\ncurl -X POST \"https://api.twinexpert.com/api/v1/conversations\" \\\n-H \"Authorization: Bearer YOUR_API_KEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n\"twinId\": \"twin-id\",\n\"title\": \"API Chat Session\"\n}'\n# 2. Gửi tin nhắn (với conversation ID từ response trên)\ncurl -X POST\n\"https://api.twinexpert.com/api/v1/conversations/CONVERSATION_ID/mes\nsages\" \\\n-H \"Authorization: Bearer YOUR_API_KEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n\"content\": \"Xin chào!\"\n}'\n2. Streaming Chat\nNhận phản hồi real-time bằng Server-Sent Events\nStreaming Response\nEndpoint streaming trả về Server-Sent Events với các event types:\n• : Thông tin tiến trình\nprogress\n• : Từng phần của response\ndelta\n• : Hoàn thành message\ncomplete\n• : Lỗi xảy ra\nerror\n13\n\n5.5. Rate Limiting\nGiới hạn tần suất gọi API để đảm bảo chất lượng dịch vụ\nRate Limiting\nread_only full_access\nAPI Key chỉ đọc API Key toàn quyền\nRequests mỗi giờ: 200 Requests mỗi giờ: 500\nBurst limit: Burst limit:\n50 100\nResponse Headers\nMọi response đều bao gồm các headers về rate limiting:\nTổng số requests được phép trong window\nX-RateLimit-Limit\nSố requests còn lại\nX-RateLimit-Remaining\nTimestamp khi counter reset\nX-RateLimit-Reset\nThời gian window (giây)\nX-RateLimit-Window\n14\n\n5.6. Xử lý lỗi\nHiểu các mã lỗi và cách xử lý chúng\nĐịnh dạng lỗi\nTất cả lỗi API đều trả về theo format chuẩn:\n{\n\"success\": false,\n\"message\": \"Mô tả lỗi cho người dùng\",\n\"error\": \"ERROR_CODE\",\n\"statusCode\": 400,\n\"meta\": {\n\"timestamp\": \"2024-01-15T10:30:00Z\",\n\"requestId\": \"req_abc123\"\n},\n\"details\": {\n// Thông tin chi tiết lỗi (nếu có)\n}\n}\nMã lỗi phổ biến\n400 Bad Request\nRequest không hợp lệ hoặc thiếu parameters\n401 Unauthorized\nAPI key không hợp lệ hoặc đã hết hạn\n15\n\n403 Forbidden\nAPI key không có quyền truy cập resource này\n404 Not Found\nResource không tồn tại\n429 Too Many Requests\nVượt quá rate limit\n500 Internal Server Error\nLỗi server, vui lòng thử lại sau\n16\n\n",
  "cleaned_lines": [
    "5. DÀNH CHO NHÀ PHÁT TRIỂN",
    "(TwinExpert API Documentation)",
    "Tích hợp AI twins vào ứng dụng của bạn với API RESTful mạnh mẽ và dễ sử dụng.",
    "Bắt Đầu Lấy API Key",
    "Bảo mật",
    "5.1. Bắt đầu với API",
    "Hướng dẫn nhanh để bắt đầu sử dụng TwinExpert API",
    "Base URL",
    "https://api.twinexpert.com/api/v1",
    "Tất cả API endpoints đều sử dụng base URL trên",
    "Tạo tài khoản Tạo API Key",
    "Đăng ký tài khoản miễn phí trên TwinExpe Vào dashboard và tạo API key trong phần",
    "cài đặt",
    "Đăng ký ngay",
    "Tạo API Key",
    "Gọi API đầu tiên Tích Hợp",
    "Sử dụng API key để gọi endpoint đầu tiên Tích hợp API vào ứng dụng của bạn",
    "Xem ví dụ API Reference",
    "5.2. Xác thực",
    "TwinExpert API sử dụng API key để xác thực requests",
    "Bảo mật API Key",
    "API key của bạn có quyền truy cập vào dữ liệu. Hãy giữ bí mật và không chia sẻ trong",
    "code phía client.",
    "Cách sử dụng API Key",
    "Thêm API key vào header Authorization của mọi request:",
    "Authorization Header",
    "Authorization: Bearer YOUR_API_KEY",
    "Hoặc sử dụng X-API-Key header",
    "X-API-Key: YOUR_API_KEY",
    "Post",
    "/api/v1/auth/api-keys",
    "<>Ví dụ code",
    "Tạo API key mới bằng JWT token",
    "JavaScript",
    "// Tạo API key mới",
    "const response = await",
    "fetch('https://api.twinexpert.com/api/v1/auth/api-keys', {",
    "method: 'POST',",
    "headers: {",
    "'Authorization': 'Bearer YOUR_JWT_TOKEN',",
    "'Content-Type': 'application/json'",
    "body: JSON.stringify({",
    "name: 'My App',",
    "scope: 'full_access'",
    "const data = await response.json();",
    "console.log('API Key:', data.data.key);",
    "cURL",
    "# Tạo API key mới",
    "curl -X POST \"https://api.twinexpert.com/api/v1/auth/api-keys\" \\",
    "-H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\",
    "-H \"Content-Type: application/json\" \\",
    "-d '{",
    "\"name\": \"My App\",",
    "\"scope\": \"full_access\"",
    "Python",
    "import requests",
    "# Tạo API key mới",
    "headers = {",
    "'Authorization': 'Bearer YOUR_JWT_TOKEN',",
    "'Content-Type': 'application/json'",
    "data = {",
    "'name': 'My App',",
    "'scope': 'full_access'",
    "response = requests.post(",
    "'https://api.twinexpert.com/api/v1/auth/api-keys',",
    "headers=headers,",
    "json=data",
    "api_key = response.json()['data']['key']",
    "print(f'API Key: {api_key}')",
    "Phạm vi quyền (Scopes)",
    "read_only Chỉ Đọc full_access Chỉ Đọc",
    "Xem danh sách Twins Tất cả quyền của Read_only",
    "Đọc thông tin cuộc trò chuyên Tạo cuộc trò chuyện mới",
    "Xem lịch sử tin nhắn Gửi tin nhắn 500 requests/giờ",
    "200 requests/giờ",
    "5.3. API Endpoints",
    "Danh sách đầy đủ các endpoints có sẵn",
    "GET /api/v1/twins Chỉ đọc",
    "Lấy danh sách Twins có thể truy cập",
    "Parameters",
    "Số trang (1-based)",
    "page",
    "integer",
    "integer Số items mỗi trang (max 100)",
    "limit",
    "GET /api/v1/twins/{id} Chỉ đọc",
    "Lấy thông tin chi tiết twin",
    "Parameters",
    "string required ID của twin",
    "POST /api/v1/twins/{id} Toàn quyền",
    "Tạo cuộc trò chuyện mới",
    "Parameters",
    "twinId string required",
    "ID của twin",
    "title string Tiêu đề cuộc trò chuyện",
    "GET /api/v1/conversations Chỉ đọc",
    "Lấy danh sách cuộc trò chuyện",
    "Parameters",
    "Số trang",
    "page",
    "integer",
    "integer Số items mỗi trang",
    "limit",
    "twinId string Lọc theo twin ID",
    "POST /api/v1/conversations/{id}/messages Toàn quyền",
    "Gửi tin nhắn",
    "Parameters",
    "string required ID cuộc trò chuyện",
    "string required Nội dung tin nhắn",
    "content",
    "POST Toàn quyền",
    "/api/v1/conversations/{id}/messages/stream",
    "Gửi tin nhắn với phản hồi streaming",
    "Parameters",
    "string required ID cuộc trò chuyện",
    "string required Nội dung tin nhắn",
    "content",
    "5.4. Ví dụ",
    "Các ví dụ code thực tế để bắt đầu nhanh",
    "1. Lấy danh sách AI Twins",
    "Xem tất cả AI twins mà bạn có thể truy cập",
    "/api/v1/twins",
    "Thử nghiệm API",
    "API Key",
    "123456",
    "Kết quả",
    "\"statusCode\": 401,",
    "\"timestamp\": \"2025-07-23T17:06:03.675Z\",",
    "\"path\": \"/api/v1/twins\",",
    "\"method\": \"GET\",",
    "\"message\": \"Invalid API key format\",",
    "\"error\": \"Unauthorized\"",
    "<> Ví dụ code",
    "Lấy danh sách twins có thể truy cập",
    "JavaScript",
    "// Lấy danh sách twins",
    "const response = await",
    "fetch('https://api.twinexpert.com/api/v1/twins', {",
    "headers: {",
    "'Authorization': 'Bearer 123456',",
    "'Content-Type': 'application/json'",
    "const twins = await response.json();",
    "console.log('Available twins:', twins.data);",
    "Python",
    "import requests",
    "# Lấy danh sách twins",
    "headers = {",
    "'Authorization': 'Bearer 123456',",
    "'Content-Type': 'application/json'",
    "response = requests.get(",
    "'https://api.twinexpert.com/api/v1/twins',",
    "headers=headers",
    "twins = response.json()['data']",
    "print(f'Found {len(twins)} twins')",
    "cURL",
    "# Lấy danh sách twins",
    "curl -X GET \"https://api.twinexpert.com/api/v1/twins\" \\",
    "-H \"Authorization: Bearer 123456\" \\",
    "-H \"Content-Type: application/json\"",
    "2. Chat với AI Twin",
    "Tạo cuộc trò chuyện và gửi tin nhắn đến AI twin",
    "GET /api/v1/conversations",
    "<> Ví dụ code",
    "Tạo cuộc trò chuyện và gửi tin nhắn đến AI twin",
    "JavaScript",
    "// Tạo cuộc trò chuyện và gửi tin nhắn",
    "async function chatWithTwin(twinId, message) {",
    "// 1. Tạo cuộc trò chuyện mới",
    "const conversationResponse = await",
    "fetch('https://api.twinexpert.com/api/v1/conversations', {",
    "method: 'POST',",
    "headers: {",
    "'Authorization': 'Bearer YOUR_API_KEY',",
    "'Content-Type': 'application/json'",
    "body: JSON.stringify({",
    "twinId: twinId,",
    "title: 'API Chat Session'",
    "const conversation = await conversationResponse.json();",
    "const conversationId = conversation.data.id;",
    "// 2. Gửi tin nhắn",
    "const messageResponse = await",
    "fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/v1/conversations/${con",
    "versationId}/messages`, {",
    "method: 'POST',",
    "headers: {",
    "'Authorization': 'Bearer YOUR_API_KEY',",
    "'Content-Type': 'application/json'",
    "body: JSON.stringify({",
    "content: message",
    "const result = await messageResponse.json();",
    "return result.data;",
    "// Sử dụng",
    "chatWithTwin('twin-id', 'Xin chào!').then(result => {",
    "console.log('Response:', result);",
    "Python",
    "import requests",
    "class TwinExpertAPI:",
    "def __init__(self, api_key):",
    "self.api_key = api_key",
    "self.base_url = 'https://api.twinexpert.com/api/v1'",
    "self.headers = {",
    "'Authorization': f'Bearer {api_key}',",
    "'Content-Type': 'application/json'",
    "def create_conversation(self, twin_id, title=\"API Chat\"):",
    "response = requests.post(",
    "f'{self.base_url}/conversations',",
    "headers=self.headers,",
    "json={'twinId': twin_id, 'title': title}",
    "return response.json()['data']",
    "def send_message(self, conversation_id, message):",
    "response = requests.post(",
    "f'{self.base_url}/conversations/{conversation_id}/messages',",
    "headers=self.headers,",
    "json={'content': message}",
    "return response.json()['data']",
    "def chat_with_twin(self, twin_id, message):",
    "# Tạo cuộc trò chuyện",
    "conversation = self.create_conversation(twin_id)",
    "# Gửi tin nhắn",
    "result = self.send_message(conversation['id'], message)",
    "return result",
    "# Sử dụng",
    "api = TwinExpertAPI('YOUR_API_KEY')",
    "response = api.chat_with_twin('twin-id', 'Xin chào!')",
    "print(response)",
    "cURL",
    "# 1. Tạo cuộc trò chuyện mới",
    "curl -X POST \"https://api.twinexpert.com/api/v1/conversations\" \\",
    "-H \"Authorization: Bearer YOUR_API_KEY\" \\",
    "-H \"Content-Type: application/json\" \\",
    "-d '{",
    "\"twinId\": \"twin-id\",",
    "\"title\": \"API Chat Session\"",
    "# 2. Gửi tin nhắn (với conversation ID từ response trên)",
    "curl -X POST",
    "\"https://api.twinexpert.com/api/v1/conversations/CONVERSATION_ID/mes",
    "sages\" \\",
    "-H \"Authorization: Bearer YOUR_API_KEY\" \\",
    "-H \"Content-Type: application/json\" \\",
    "-d '{",
    "\"content\": \"Xin chào!\"",
    "2. Streaming Chat",
    "Nhận phản hồi real-time bằng Server-Sent Events",
    "Streaming Response",
    "Endpoint streaming trả về Server-Sent Events với các event types:",
    "• : Thông tin tiến trình",
    "progress",
    "• : Từng phần của response",
    "delta",
    "• : Hoàn thành message",
    "complete",
    "• : Lỗi xảy ra",
    "error",
    "5.5. Rate Limiting",
    "Giới hạn tần suất gọi API để đảm bảo chất lượng dịch vụ",
    "Rate Limiting",
    "read_only full_access",
    "API Key chỉ đọc API Key toàn quyền",
    "Requests mỗi giờ: 200 Requests mỗi giờ: 500",
    "Burst limit: Burst limit:",
    "50 100",
    "Response Headers",
    "Mọi response đều bao gồm các headers về rate limiting:",
    "Tổng số requests được phép trong window",
    "X-RateLimit-Limit",
    "Số requests còn lại",
    "X-RateLimit-Remaining",
    "Timestamp khi counter reset",
    "X-RateLimit-Reset",
    "Thời gian window (giây)",
    "X-RateLimit-Window",
    "5.6. Xử lý lỗi",
    "Hiểu các mã lỗi và cách xử lý chúng",
    "Định dạng lỗi",
    "Tất cả lỗi API đều trả về theo format chuẩn:",
    "\"success\": false,",
    "\"message\": \"Mô tả lỗi cho người dùng\",",
    "\"error\": \"ERROR_CODE\",",
    "\"statusCode\": 400,",
    "\"meta\": {",
    "\"timestamp\": \"2024-01-15T10:30:00Z\",",
    "\"requestId\": \"req_abc123\"",
    "\"details\": {",
    "// Thông tin chi tiết lỗi (nếu có)",
    "Mã lỗi phổ biến",
    "400 Bad Request",
    "Request không hợp lệ hoặc thiếu parameters",
    "401 Unauthorized",
    "API key không hợp lệ hoặc đã hết hạn",
    "403 Forbidden",
    "API key không có quyền truy cập resource này",
    "404 Not Found",
    "Resource không tồn tại",
    "429 Too Many Requests",
    "Vượt quá rate limit",
    "500 Internal Server Error",
    "Lỗi server, vui lòng thử lại sau"
  ],
  "headings": [
    "5. DÀNH CHO NHÀ PHÁT TRIỂN",
    "(TwinExpert API Documentation)",
    "Bắt Đầu Lấy API Key",
    "Bảo mật",
    "5.1. Bắt đầu với API",
    "Hướng dẫn nhanh để bắt đầu sử dụng TwinExpert API",
    "Base URL",
    "https://api.twinexpert.com/api/v1",
    "Tất cả API endpoints đều sử dụng base URL trên",
    "Tạo tài khoản Tạo API Key",
    "cài đặt",
    "Đăng ký ngay",
    "Tạo API Key",
    "Gọi API đầu tiên Tích Hợp",
    "Sử dụng API key để gọi endpoint đầu tiên Tích hợp API vào ứng dụng của bạn",
    "Xem ví dụ API Reference",
    "5.2. Xác thực",
    "TwinExpert API sử dụng API key để xác thực requests",
    "Bảo mật API Key",
    "Cách sử dụng API Key",
    "Thêm API key vào header Authorization của mọi request:",
    "Authorization Header",
    "Authorization: Bearer YOUR_API_KEY",
    "Hoặc sử dụng X-API-Key header",
    "X-API-Key: YOUR_API_KEY",
    "Post",
    "/api/v1/auth/api-keys",
    "<>Ví dụ code",
    "Tạo API key mới bằng JWT token",
    "JavaScript",
    "// Tạo API key mới",
    "const response = await",
    "fetch('https://api.twinexpert.com/api/v1/auth/api-keys', {",
    "headers: {",
    "'Content-Type': 'application/json'",
    "body: JSON.stringify({",
    "scope: 'full_access'",
    "const data = await response.json();",
    "console.log('API Key:', data.data.key);",
    "cURL",
    "# Tạo API key mới",
    "curl -X POST \"https://api.twinexpert.com/api/v1/auth/api-keys\" \\",
    "-H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\",
    "-H \"Content-Type: application/json\" \\",
    "-d '{",
    "\"scope\": \"full_access\"",
    "Python",
    "import requests",
    "# Tạo API key mới",
    "headers = {",
    "'Content-Type': 'application/json'",
    "data = {",
    "'scope': 'full_access'",
    "response = requests.post(",
    "json=data",
    "api_key = response.json()['data']['key']",
    "print(f'API Key: {api_key}')",
    "Phạm vi quyền (Scopes)",
    "read_only Chỉ Đọc full_access Chỉ Đọc",
    "Xem danh sách Twins Tất cả quyền của Read_only",
    "Đọc thông tin cuộc trò chuyên Tạo cuộc trò chuyện mới",
    "Xem lịch sử tin nhắn Gửi tin nhắn 500 requests/giờ",
    "200 requests/giờ",
    "5.3. API Endpoints",
    "Danh sách đầy đủ các endpoints có sẵn",
    "GET /api/v1/twins Chỉ đọc",
    "Lấy danh sách Twins có thể truy cập",
    "Parameters",
    "Số trang (1-based)",
    "page",
    "integer",
    "integer Số items mỗi trang (max 100)",
    "limit",
    "GET /api/v1/twins/{id} Chỉ đọc",
    "Lấy thông tin chi tiết twin",
    "Parameters",
    "string required ID của twin",
    "POST /api/v1/twins/{id} Toàn quyền",
    "Tạo cuộc trò chuyện mới",
    "Parameters",
    "twinId string required",
    "ID của twin",
    "title string Tiêu đề cuộc trò chuyện",
    "GET /api/v1/conversations Chỉ đọc",
    "Lấy danh sách cuộc trò chuyện",
    "Parameters",
    "Số trang",
    "page",
    "integer",
    "integer Số items mỗi trang",
    "limit",
    "twinId string Lọc theo twin ID",
    "POST /api/v1/conversations/{id}/messages Toàn quyền",
    "Gửi tin nhắn",
    "Parameters",
    "string required ID cuộc trò chuyện",
    "string required Nội dung tin nhắn",
    "content",
    "POST Toàn quyền",
    "/api/v1/conversations/{id}/messages/stream",
    "Gửi tin nhắn với phản hồi streaming",
    "Parameters",
    "string required ID cuộc trò chuyện",
    "string required Nội dung tin nhắn",
    "content",
    "5.4. Ví dụ",
    "Các ví dụ code thực tế để bắt đầu nhanh",
    "1. Lấy danh sách AI Twins",
    "Xem tất cả AI twins mà bạn có thể truy cập",
    "/api/v1/twins",
    "Thử nghiệm API",
    "API Key",
    "123456",
    "Kết quả",
    "\"error\": \"Unauthorized\"",
    "<> Ví dụ code",
    "Lấy danh sách twins có thể truy cập",
    "JavaScript",
    "// Lấy danh sách twins",
    "const response = await",
    "fetch('https://api.twinexpert.com/api/v1/twins', {",
    "headers: {",
    "'Content-Type': 'application/json'",
    "const twins = await response.json();",
    "console.log('Available twins:', twins.data);",
    "Python",
    "import requests",
    "# Lấy danh sách twins",
    "headers = {",
    "'Content-Type': 'application/json'",
    "response = requests.get(",
    "headers=headers",
    "twins = response.json()['data']",
    "print(f'Found {len(twins)} twins')",
    "cURL",
    "# Lấy danh sách twins",
    "curl -X GET \"https://api.twinexpert.com/api/v1/twins\" \\",
    "-H \"Authorization: Bearer 123456\" \\",
    "-H \"Content-Type: application/json\"",
    "2. Chat với AI Twin",
    "Tạo cuộc trò chuyện và gửi tin nhắn đến AI twin",
    "GET /api/v1/conversations",
    "<> Ví dụ code",
    "Tạo cuộc trò chuyện và gửi tin nhắn đến AI twin",
    "JavaScript",
    "// Tạo cuộc trò chuyện và gửi tin nhắn",
    "async function chatWithTwin(twinId, message) {",
    "// 1. Tạo cuộc trò chuyện mới",
    "const conversationResponse = await",
    "fetch('https://api.twinexpert.com/api/v1/conversations', {",
    "headers: {",
    "'Content-Type': 'application/json'",
    "body: JSON.stringify({",
    "title: 'API Chat Session'",
    "const conversation = await conversationResponse.json();",
    "const conversationId = conversation.data.id;",
    "// 2. Gửi tin nhắn",
    "const messageResponse = await",
    "fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/v1/conversations/${con",
    "versationId}/messages`, {",
    "headers: {",
    "'Content-Type': 'application/json'",
    "body: JSON.stringify({",
    "content: message",
    "const result = await messageResponse.json();",
    "return result.data;",
    "// Sử dụng",
    "chatWithTwin('twin-id', 'Xin chào!').then(result => {",
    "console.log('Response:', result);",
    "Python",
    "import requests",
    "class TwinExpertAPI:",
    "def __init__(self, api_key):",
    "self.api_key = api_key",
    "self.base_url = 'https://api.twinexpert.com/api/v1'",
    "self.headers = {",
    "'Content-Type': 'application/json'",
    "def create_conversation(self, twin_id, title=\"API Chat\"):",
    "response = requests.post(",
    "json={'twinId': twin_id, 'title': title}",
    "return response.json()['data']",
    "def send_message(self, conversation_id, message):",
    "response = requests.post(",
    "json={'content': message}",
    "return response.json()['data']",
    "def chat_with_twin(self, twin_id, message):",
    "# Tạo cuộc trò chuyện",
    "conversation = self.create_conversation(twin_id)",
    "# Gửi tin nhắn",
    "result = self.send_message(conversation['id'], message)",
    "return result",
    "# Sử dụng",
    "api = TwinExpertAPI('YOUR_API_KEY')",
    "response = api.chat_with_twin('twin-id', 'Xin chào!')",
    "print(response)",
    "cURL",
    "# 1. Tạo cuộc trò chuyện mới",
    "curl -X POST \"https://api.twinexpert.com/api/v1/conversations\" \\",
    "-H \"Authorization: Bearer YOUR_API_KEY\" \\",
    "-H \"Content-Type: application/json\" \\",
    "-d '{",
    "\"title\": \"API Chat Session\"",
    "# 2. Gửi tin nhắn (với conversation ID từ response trên)",
    "curl -X POST",
    "\"https://api.twinexpert.com/api/v1/conversations/CONVERSATION_ID/mes",
    "sages\" \\",
    "-H \"Authorization: Bearer YOUR_API_KEY\" \\",
    "-H \"Content-Type: application/json\" \\",
    "-d '{",
    "\"content\": \"Xin chào!\"",
    "2. Streaming Chat",
    "Nhận phản hồi real-time bằng Server-Sent Events",
    "Streaming Response",
    "Endpoint streaming trả về Server-Sent Events với các event types:",
    "• : Thông tin tiến trình",
    "progress",
    "• : Từng phần của response",
    "delta",
    "• : Hoàn thành message",
    "complete",
    "• : Lỗi xảy ra",
    "error",
    "5.5. Rate Limiting",
    "Giới hạn tần suất gọi API để đảm bảo chất lượng dịch vụ",
    "Rate Limiting",
    "read_only full_access",
    "API Key chỉ đọc API Key toàn quyền",
    "Requests mỗi giờ: 200 Requests mỗi giờ: 500",
    "Burst limit: Burst limit:",
    "50 100",
    "Response Headers",
    "Mọi response đều bao gồm các headers về rate limiting:",
    "Tổng số requests được phép trong window",
    "X-RateLimit-Limit",
    "Số requests còn lại",
    "X-RateLimit-Remaining",
    "Timestamp khi counter reset",
    "X-RateLimit-Reset",
    "Thời gian window (giây)",
    "X-RateLimit-Window",
    "5.6. Xử lý lỗi",
    "Hiểu các mã lỗi và cách xử lý chúng",
    "Định dạng lỗi",
    "Tất cả lỗi API đều trả về theo format chuẩn:",
    "\"meta\": {",
    "\"requestId\": \"req_abc123\"",
    "\"details\": {",
    "// Thông tin chi tiết lỗi (nếu có)",
    "Mã lỗi phổ biến",
    "400 Bad Request",
    "Request không hợp lệ hoặc thiếu parameters",
    "401 Unauthorized",
    "API key không hợp lệ hoặc đã hết hạn",
    "403 Forbidden",
    "API key không có quyền truy cập resource này",
    "404 Not Found",
    "Resource không tồn tại",
    "429 Too Many Requests",
    "Vượt quá rate limit",
    "500 Internal Server Error",
    "Lỗi server, vui lòng thử lại sau"
  ],
  "page_contents": [
    {
      "page_number": 1,
      "text": "5. DÀNH CHO NHÀ PHÁT TRIỂN\n(TwinExpert API Documentation)\nTích hợp AI twins vào ứng dụng của bạn với API RESTful mạnh mẽ và dễ sử dụng.\nBắt Đầu Lấy API Key\nBảo mật\n1",
      "length": 165
    },
    {
      "page_number": 2,
      "text": "5.1. Bắt đầu với API\nHướng dẫn nhanh để bắt đầu sử dụng TwinExpert API\nBase URL\nhttps://api.twinexpert.com/api/v1\nTất cả API endpoints đều sử dụng base URL trên\nTạo tài khoản Tạo API Key\nĐăng ký tài khoản miễn phí trên TwinExpe Vào dashboard và tạo API key trong phần\ncài đặt\nĐăng ký ngay\nTạo API Key\nGọi API đầu tiên Tích Hợp\nSử dụng API key để gọi endpoint đầu tiên Tích hợp API vào ứng dụng của bạn\nXem ví dụ API Reference\n2",
      "length": 427
    },
    {
      "page_number": 3,
      "text": "5.2. Xác thực\nTwinExpert API sử dụng API key để xác thực requests\nBảo mật API Key\nAPI key của bạn có quyền truy cập vào dữ liệu. Hãy giữ bí mật và không chia sẻ trong\ncode phía client.\nCách sử dụng API Key\nThêm API key vào header Authorization của mọi request:\nAuthorization Header\nAuthorization: Bearer YOUR_API_KEY\nHoặc sử dụng X-API-Key header\nX-API-Key: YOUR_API_KEY\nPost\n/api/v1/auth/api-keys\n<>Ví dụ code\nTạo API key mới bằng JWT token\n3",
      "length": 443
    },
    {
      "page_number": 4,
      "text": "JavaScript\n// Tạo API key mới\nconst response = await\nfetch('https://api.twinexpert.com/api/v1/auth/api-keys', {\nmethod: 'POST',\nheaders: {\n'Authorization': 'Bearer YOUR_JWT_TOKEN',\n'Content-Type': 'application/json'\n},\nbody: JSON.stringify({\nname: 'My App',\nscope: 'full_access'\n})\n});\nconst data = await response.json();\nconsole.log('API Key:', data.data.key);\ncURL\n# Tạo API key mới\ncurl -X POST \"https://api.twinexpert.com/api/v1/auth/api-keys\" \\\n-H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n\"name\": \"My App\",\n\"scope\": \"full_access\"\n}'\n4",
      "length": 583
    },
    {
      "page_number": 5,
      "text": "Python\nimport requests\n# Tạo API key mới\nheaders = {\n'Authorization': 'Bearer YOUR_JWT_TOKEN',\n'Content-Type': 'application/json'\n}\ndata = {\n'name': 'My App',\n'scope': 'full_access'\n}\nresponse = requests.post(\n'https://api.twinexpert.com/api/v1/auth/api-keys',\nheaders=headers,\njson=data\n)\napi_key = response.json()['data']['key']\nprint(f'API Key: {api_key}')\nPhạm vi quyền (Scopes)\nread_only Chỉ Đọc full_access Chỉ Đọc\nXem danh sách Twins Tất cả quyền của Read_only\nĐọc thông tin cuộc trò chuyên Tạo cuộc trò chuyện mới\nXem lịch sử tin nhắn Gửi tin nhắn 500 requests/giờ\n200 requests/giờ\n5",
      "length": 591
    },
    {
      "page_number": 6,
      "text": "5.3. API Endpoints\nDanh sách đầy đủ các endpoints có sẵn\nGET /api/v1/twins Chỉ đọc\nLấy danh sách Twins có thể truy cập\nParameters\nSố trang (1-based)\npage\ninteger\ninteger Số items mỗi trang (max 100)\nlimit\nGET /api/v1/twins/{id} Chỉ đọc\nLấy thông tin chi tiết twin\nParameters\nstring required ID của twin\nid\nPOST /api/v1/twins/{id} Toàn quyền\nTạo cuộc trò chuyện mới\nParameters\ntwinId string required\nID của twin\ntitle string Tiêu đề cuộc trò chuyện\n6",
      "length": 449
    },
    {
      "page_number": 7,
      "text": "GET /api/v1/conversations Chỉ đọc\nLấy danh sách cuộc trò chuyện\nParameters\nSố trang\npage\ninteger\ninteger Số items mỗi trang\nlimit\ntwinId string Lọc theo twin ID\nPOST /api/v1/conversations/{id}/messages Toàn quyền\nGửi tin nhắn\nParameters\nstring required ID cuộc trò chuyện\nid\nstring required Nội dung tin nhắn\ncontent\nPOST Toàn quyền\n/api/v1/conversations/{id}/messages/stream\nGửi tin nhắn với phản hồi streaming\nParameters\nstring required ID cuộc trò chuyện\nid\nstring required Nội dung tin nhắn\ncontent\n7",
      "length": 504
    },
    {
      "page_number": 8,
      "text": "5.4. Ví dụ\nCác ví dụ code thực tế để bắt đầu nhanh\n1. Lấy danh sách AI Twins\nXem tất cả AI twins mà bạn có thể truy cập\nGET\n/api/v1/twins\nThử nghiệm API\nAPI Key\n123456\nKết quả\n{\n\"statusCode\": 401,\n\"timestamp\": \"2025-07-23T17:06:03.675Z\",\n\"path\": \"/api/v1/twins\",\n\"method\": \"GET\",\n\"message\": \"Invalid API key format\",\n\"error\": \"Unauthorized\"\n}\n<> Ví dụ code\nLấy danh sách twins có thể truy cập\n8",
      "length": 394
    },
    {
      "page_number": 9,
      "text": "JavaScript\n// Lấy danh sách twins\nconst response = await\nfetch('https://api.twinexpert.com/api/v1/twins', {\nheaders: {\n'Authorization': 'Bearer 123456',\n'Content-Type': 'application/json'\n}\n});\nconst twins = await response.json();\nconsole.log('Available twins:', twins.data);\nPython\nimport requests\n# Lấy danh sách twins\nheaders = {\n'Authorization': 'Bearer 123456',\n'Content-Type': 'application/json'\n}\nresponse = requests.get(\n'https://api.twinexpert.com/api/v1/twins',\nheaders=headers\n)\ntwins = response.json()['data']\nprint(f'Found {len(twins)} twins')\ncURL\n# Lấy danh sách twins\ncurl -X GET \"https://api.twinexpert.com/api/v1/twins\" \\\n-H \"Authorization: Bearer 123456\" \\\n-H \"Content-Type: application/json\"\n9",
      "length": 713
    },
    {
      "page_number": 10,
      "text": "2. Chat với AI Twin\nTạo cuộc trò chuyện và gửi tin nhắn đến AI twin\nGET /api/v1/conversations\n<> Ví dụ code\nTạo cuộc trò chuyện và gửi tin nhắn đến AI twin\n10",
      "length": 158
    },
    {
      "page_number": 11,
      "text": "JavaScript\n// Tạo cuộc trò chuyện và gửi tin nhắn\nasync function chatWithTwin(twinId, message) {\n// 1. Tạo cuộc trò chuyện mới\nconst conversationResponse = await\nfetch('https://api.twinexpert.com/api/v1/conversations', {\nmethod: 'POST',\nheaders: {\n'Authorization': 'Bearer YOUR_API_KEY',\n'Content-Type': 'application/json'\n},\nbody: JSON.stringify({\ntwinId: twinId,\ntitle: 'API Chat Session'\n})\n});\nconst conversation = await conversationResponse.json();\nconst conversationId = conversation.data.id;\n// 2. Gửi tin nhắn\nconst messageResponse = await\nfetch(`${process.env.NEXT_PUBLIC_API_URL}/api/v1/conversations/${con\nversationId}/messages`, {\nmethod: 'POST',\nheaders: {\n'Authorization': 'Bearer YOUR_API_KEY',\n'Content-Type': 'application/json'\n},\nbody: JSON.stringify({\ncontent: message\n})\n});\nconst result = await messageResponse.json();\nreturn result.data;\n}\n// Sử dụng\nchatWithTwin('twin-id', 'Xin chào!').then(result => {\nconsole.log('Response:', result);\n});\n11",
      "length": 967
    },
    {
      "page_number": 12,
      "text": "Python\nimport requests\nclass TwinExpertAPI:\ndef __init__(self, api_key):\nself.api_key = api_key\nself.base_url = 'https://api.twinexpert.com/api/v1'\nself.headers = {\n'Authorization': f'Bearer {api_key}',\n'Content-Type': 'application/json'\n}\ndef create_conversation(self, twin_id, title=\"API Chat\"):\nresponse = requests.post(\nf'{self.base_url}/conversations',\nheaders=self.headers,\njson={'twinId': twin_id, 'title': title}\n)\nreturn response.json()['data']\ndef send_message(self, conversation_id, message):\nresponse = requests.post(\nf'{self.base_url}/conversations/{conversation_id}/messages',\nheaders=self.headers,\njson={'content': message}\n)\nreturn response.json()['data']\ndef chat_with_twin(self, twin_id, message):\n# Tạo cuộc trò chuyện\nconversation = self.create_conversation(twin_id)\n# Gửi tin nhắn\nresult = self.send_message(conversation['id'], message)\nreturn result\n# Sử dụng\napi = TwinExpertAPI('YOUR_API_KEY')\nresponse = api.chat_with_twin('twin-id', 'Xin chào!')\nprint(response)\n12",
      "length": 990
    },
    {
      "page_number": 13,
      "text": "cURL\n# 1. Tạo cuộc trò chuyện mới\ncurl -X POST \"https://api.twinexpert.com/api/v1/conversations\" \\\n-H \"Authorization: Bearer YOUR_API_KEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n\"twinId\": \"twin-id\",\n\"title\": \"API Chat Session\"\n}'\n# 2. Gửi tin nhắn (với conversation ID từ response trên)\ncurl -X POST\n\"https://api.twinexpert.com/api/v1/conversations/CONVERSATION_ID/mes\nsages\" \\\n-H \"Authorization: Bearer YOUR_API_KEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n\"content\": \"Xin chào!\"\n}'\n2. Streaming Chat\nNhận phản hồi real-time bằng Server-Sent Events\nStreaming Response\nEndpoint streaming trả về Server-Sent Events với các event types:\n• : Thông tin tiến trình\nprogress\n• : Từng phần của response\ndelta\n• : Hoàn thành message\ncomplete\n• : Lỗi xảy ra\nerror\n13",
      "length": 770
    },
    {
      "page_number": 14,
      "text": "5.5. Rate Limiting\nGiới hạn tần suất gọi API để đảm bảo chất lượng dịch vụ\nRate Limiting\nread_only full_access\nAPI Key chỉ đọc API Key toàn quyền\nRequests mỗi giờ: 200 Requests mỗi giờ: 500\nBurst limit: Burst limit:\n50 100\nResponse Headers\nMọi response đều bao gồm các headers về rate limiting:\nTổng số requests được phép trong window\nX-RateLimit-Limit\nSố requests còn lại\nX-RateLimit-Remaining\nTimestamp khi counter reset\nX-RateLimit-Reset\nThời gian window (giây)\nX-RateLimit-Window\n14",
      "length": 486
    },
    {
      "page_number": 15,
      "text": "5.6. Xử lý lỗi\nHiểu các mã lỗi và cách xử lý chúng\nĐịnh dạng lỗi\nTất cả lỗi API đều trả về theo format chuẩn:\n{\n\"success\": false,\n\"message\": \"Mô tả lỗi cho người dùng\",\n\"error\": \"ERROR_CODE\",\n\"statusCode\": 400,\n\"meta\": {\n\"timestamp\": \"2024-01-15T10:30:00Z\",\n\"requestId\": \"req_abc123\"\n},\n\"details\": {\n// Thông tin chi tiết lỗi (nếu có)\n}\n}\nMã lỗi phổ biến\n400 Bad Request\nRequest không hợp lệ hoặc thiếu parameters\n401 Unauthorized\nAPI key không hợp lệ hoặc đã hết hạn\n15",
      "length": 470
    },
    {
      "page_number": 16,
      "text": "403 Forbidden\nAPI key không có quyền truy cập resource này\n404 Not Found\nResource không tồn tại\n429 Too Many Requests\nVượt quá rate limit\n500 Internal Server Error\nLỗi server, vui lòng thử lại sau\n16",
      "length": 199
    }
  ]
}