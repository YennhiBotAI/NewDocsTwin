#!/usr/bin/env python3
"""
Script to update Section 5 and Section 6 documentation with content from PDF files
"""

import json
import os
import re

def load_json_content(file_path):
    """Load content from JSON file"""
    with open(file_path, 'r', encoding='utf-8') as f:
        return json.load(f)

def clean_text(text):
    """Clean text for markdown formatting"""
    # Remove extra spaces and clean up
    text = re.sub(r'\s+', ' ', text).strip()
    return text

def create_section_5_files():
    """Create Section 5 API documentation files from PDF content"""
    
    # Load PDF content
    section_5_data = load_json_content('section_5_pdf_content.json')
    lines = section_5_data['cleaned_lines']
    
    # Main index file
    index_content = '''---
title: "D√†nh cho Nh√† ph√°t tri·ªÉn"
description: "TwinExpert API Documentation - T√†i li·ªáu API cho nh√† ph√°t tri·ªÉn"
---

# D√†nh cho Nh√† ph√°t tri·ªÉn (TwinExpert API Documentation)

Twin AI cung c·∫•p m·ªôt b·ªô API m·∫°nh m·∫Ω cho ph√©p c√°c nh√† ph√°t tri·ªÉn t√≠ch h·ª£p s·ª©c m·∫°nh c·ªßa Twin AI v√†o c√°c ·ª©ng d·ª•ng v√† h·ªá th·ªëng c·ªßa ri√™ng h·ªç.

## N·ªôi dung ch√≠nh

<div class="grid-container">
  <div class="grid-item">
    <h3><a href="./getting-started">5.1. B·∫Øt ƒë·∫ßu v·ªõi API</a></h3>
    <p>H∆∞·ªõng d·∫´n b·∫Øt ƒë·∫ßu nhanh v·ªõi Twin AI API</p>
  </div>
  
  <div class="grid-item">
    <h3><a href="./authentication">5.2. X√°c th·ª±c</a></h3>
    <p>C√°ch x√°c th·ª±c v√† b·∫£o m·∫≠t API calls</p>
  </div>
  
  <div class="grid-item">
    <h3><a href="./endpoints">5.3. API Endpoints</a></h3>
    <p>Chi ti·∫øt v·ªÅ c√°c endpoints v√† parameters</p>
  </div>
  
  <div class="grid-item">
    <h3><a href="./examples">5.4. V√≠ d·ª•</a></h3>
    <p>C√°c v√≠ d·ª• th·ª±c t·∫ø s·ª≠ d·ª•ng API</p>
  </div>
  
  <div class="grid-item">
    <h3><a href="./rate-limiting">5.5. Rate Limiting</a></h3>
    <p>Gi·ªõi h·∫°n t·∫ßn su·∫•t v√† best practices</p>
  </div>
  
  <div class="grid-item">
    <h3><a href="./error-handling">5.6. X·ª≠ l√Ω l·ªói</a></h3>
    <p>C√°ch x·ª≠ l√Ω l·ªói v√† troubleshooting</p>
  </div>
</div>

## API Overview

Twin AI API ƒë∆∞·ª£c thi·∫øt k·∫ø v·ªõi c√°c nguy√™n t·∫Øc REST, s·ª≠ d·ª•ng HTTP methods chu·∫©n v√† tr·∫£ v·ªÅ JSON responses. API h·ªó tr·ª£ authentication qua API keys v√† c√≥ h·ªá th·ªëng rate limiting ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªáu su·∫•t ·ªïn ƒë·ªãnh.

### Base URL
```
https://api.twinai.dev/v1
```

### Y√™u c·∫ßu h·ªá th·ªëng
- HTTP/1.1 ho·∫∑c HTTP/2
- TLS 1.2 tr·ªü l√™n
- Content-Type: application/json
- Authorization header v·ªõi API key

---

::: tip Ghi ch√∫
API documentation n√†y ƒë∆∞·ª£c c·∫≠p nh·∫≠t th∆∞·ªùng xuy√™n. Vui l√≤ng theo d√µi [changelog](/changelog) ƒë·ªÉ bi·∫øt c√°c thay ƒë·ªïi m·ªõi nh·∫•t.
:::
'''

    # Create docs/api directory if not exists
    os.makedirs('docs/api', exist_ok=True)
    
    # Write index file
    with open('docs/api/index.md', 'w', encoding='utf-8') as f:
        f.write(index_content)
    
    print("‚úÖ Created docs/api/index.md")

    # Extract content for each subsection from PDF lines
    current_section = None
    sections = {
        '5.1': {'title': 'B·∫Øt ƒë·∫ßu v·ªõi API', 'content': []},
        '5.2': {'title': 'X√°c th·ª±c', 'content': []},
        '5.3': {'title': 'API Endpoints', 'content': []},
        '5.4': {'title': 'V√≠ d·ª•', 'content': []},
        '5.5': {'title': 'Rate Limiting', 'content': []},
        '5.6': {'title': 'X·ª≠ l√Ω l·ªói', 'content': []}
    }
    
    # Parse content from PDF lines
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # Check for section headers
        if line.startswith('5.1.') or 'B·∫Øt ƒë·∫ßu v·ªõi API' in line:
            current_section = '5.1'
        elif line.startswith('5.2.') or 'X√°c th·ª±c' in line:
            current_section = '5.2'
        elif line.startswith('5.3.') or 'API Endpoints' in line:
            current_section = '5.3'
        elif line.startswith('5.4.') or line == 'V√≠ d·ª•':
            current_section = '5.4'
        elif line.startswith('5.5.') or 'Rate Limiting' in line:
            current_section = '5.5'
        elif line.startswith('5.6.') or 'X·ª≠ l√Ω l·ªói' in line:
            current_section = '5.6'
        elif current_section and line not in [sections[current_section]['title']]:
            sections[current_section]['content'].append(line)
    
    # Create individual files
    file_mapping = {
        '5.1': 'getting-started.md',
        '5.2': 'authentication.md', 
        '5.3': 'endpoints.md',
        '5.4': 'examples.md',
        '5.5': 'rate-limiting.md',
        '5.6': 'error-handling.md'
    }
    
    for section_key, filename in file_mapping.items():
        section_data = sections[section_key]
        content = f'''---
title: "{section_data['title']}"
description: "Twin AI API - {section_data['title']}"
---

# {section_key}. {section_data['title']}

'''
        
        # Add content from PDF
        if section_data['content']:
            for line in section_data['content']:
                # Format as markdown
                if line.strip():
                    # Check if it's a header-like line
                    if len(line) < 100 and any(char.isupper() for char in line):
                        content += f"\n## {line}\n\n"
                    else:
                        content += f"{line}\n\n"
        else:
            content += "N·ªôi dung ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ t√†i li·ªáu PDF.\n\n"
        
        content += '''
---

::: tip C·∫ßn h·ªó tr·ª£?
N·∫øu b·∫°n g·∫∑p v·∫•n ƒë·ªÅ v·ªõi API, vui l√≤ng li√™n h·ªá qua [email h·ªó tr·ª£](mailto:agent.twinai@gmail.com).
:::
'''
        
        with open(f'docs/api/{filename}', 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ Created docs/api/{filename}")

def create_section_6_files():
    """Create Section 6 Support documentation files from PDF content"""
    
    # Load PDF content
    section_6_data = load_json_content('section_6_pdf_content.json')
    lines = section_6_data['cleaned_lines']
    
    # Create docs/support directory if not exists
    os.makedirs('docs/support', exist_ok=True)
    
    # Main index file
    index_content = '''---
title: "T√†i nguy√™n & H·ªó tr·ª£"
description: "Trung t√¢m h·ªó tr·ª£, FAQs v√† t√†i nguy√™n cho ng∆∞·ªùi d√πng Twin AI"
---

# T√†i nguy√™n & H·ªó tr·ª£

ƒê√¢y l√† trung t√¢m h·ªó tr·ª£, n∆°i ng∆∞·ªùi d√πng c√≥ th·ªÉ t√¨m th·∫•y c√¢u tr·∫£ l·ªùi cho c√°c c√¢u h·ªèi, c√°c k√™nh li√™n l·∫°c v√† c√°c t√†i nguy√™n b·ªï sung.

## N·ªôi dung ch√≠nh

<div class="grid-container">
  <div class="grid-item">
    <h3><a href="./faqs">6.1. C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p (FAQs)</a></h3>
    <p>T√¨m c√¢u tr·∫£ l·ªùi nhanh cho nh·ªØng th·∫Øc m·∫Øc ph·ªï bi·∫øn nh·∫•t v·ªÅ Twin AI</p>
  </div>
  
  <div class="grid-item">
    <h3><a href="./support-channels">6.2. C√°c k√™nh h·ªó tr·ª£</a></h3>
    <p>C√°c c√°ch ƒë·ªÉ li√™n h·ªá v·ªõi ƒë·ªôi ng≈© Twin AI khi b·∫°n c·∫ßn s·ª± tr·ª£ gi√∫p</p>
  </div>
  
  <div class="grid-item">
    <h3><a href="./glossary">6.3. B·∫£ng thu·∫≠t ng·ªØ</a></h3>
    <p>Gi·∫£i th√≠ch c√°c thu·∫≠t ng·ªØ v√† kh√°i ni·ªám ch√≠nh ƒë∆∞·ª£c s·ª≠ d·ª•ng trong Twin AI</p>
  </div>
</div>

## H·ªó tr·ª£ nhanh

### üìß Email h·ªó tr·ª£
[agent.twinai@gmail.com](mailto:agent.twinai@gmail.com)

### üí¨ C·ªông ƒë·ªìng
Tham gia c·ªông ƒë·ªìng Twin AI tr√™n Zalo ƒë·ªÉ trao ƒë·ªïi kinh nghi·ªám v√† h·ªçc h·ªèi.

### üìö T√†i li·ªáu
Kh√°m ph√° th√™m c√°c h∆∞·ªõng d·∫´n chi ti·∫øt trong documentation n√†y.

---

::: tip M·∫πo
Tr∆∞·ªõc khi li√™n h·ªá h·ªó tr·ª£, h√£y ki·ªÉm tra [FAQs](/support/faqs) - c√≥ th·ªÉ c√¢u tr·∫£ l·ªùi b·∫°n c·∫ßn ƒë√£ c√≥ s·∫µn!
:::
'''

    with open('docs/support/index.md', 'w', encoding='utf-8') as f:
        f.write(index_content)
    
    print("‚úÖ Created docs/support/index.md")
    
    # Parse content for each subsection
    current_section = None
    sections = {
        '6.1': {'title': 'C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p (FAQs)', 'content': []},
        '6.2': {'title': 'C√°c k√™nh h·ªó tr·ª£', 'content': []},
        '6.3': {'title': 'B·∫£ng thu·∫≠t ng·ªØ', 'content': []}
    }
    
    # Parse PDF content
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # Check for section headers
        if line.startswith('6.1.') or 'C√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p' in line:
            current_section = '6.1'
        elif line.startswith('6.2.') or 'C√°c k√™nh h·ªó tr·ª£' in line:
            current_section = '6.2'
        elif line.startswith('6.3.') or 'B·∫£ng thu·∫≠t ng·ªØ' in line:
            current_section = '6.3'
        elif current_section and line not in [sections[current_section]['title']]:
            sections[current_section]['content'].append(line)
    
    # Create individual files
    file_mapping = {
        '6.1': 'faqs.md',
        '6.2': 'support-channels.md',
        '6.3': 'glossary.md'
    }
    
    for section_key, filename in file_mapping.items():
        section_data = sections[section_key]
        content = f'''---
title: "{section_data['title']}"
description: "Twin AI - {section_data['title']}"
---

# {section_key}. {section_data['title']}

'''
        
        # Add content from PDF
        if section_data['content']:
            for line in section_data['content']:
                if line.strip():
                    # Format questions/answers for FAQs
                    if section_key == '6.1' and line[0].isdigit() and '.' in line[:5]:
                        content += f"\n## {line}\n\n"
                    # Format headers
                    elif len(line) < 100 and any(char.isupper() for char in line) and not line.startswith('‚Ä¢'):
                        content += f"\n## {line}\n\n"
                    # Format list items
                    elif line.startswith('‚Ä¢'):
                        content += f"{line}\n\n"
                    # Regular content
                    else:
                        content += f"{line}\n\n"
        else:
            content += "N·ªôi dung ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ t√†i li·ªáu PDF.\n\n"
        
        content += '''
---

::: tip C·∫ßn th√™m h·ªó tr·ª£?
N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin b·∫°n c·∫ßn, vui l√≤ng li√™n h·ªá qua [email h·ªó tr·ª£](mailto:agent.twinai@gmail.com).
:::
'''
        
        with open(f'docs/support/{filename}', 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ Created docs/support/{filename}")

def main():
    """Main function to update all sections"""
    print("üîÑ Updating Section 5 and Section 6 from PDF content...")
    
    # Update Section 5 - API Documentation
    print("\nüìÅ Creating Section 5 - API Documentation...")
    create_section_5_files()
    
    # Update Section 6 - Support Resources  
    print("\nüìÅ Creating Section 6 - Support Resources...")
    create_section_6_files()
    
    print("\n‚úÖ All sections updated successfully!")
    print("\nüìã Summary:")
    print("   - Section 5: API documentation updated with PDF content")
    print("   - Section 6: Support resources updated with PDF content")
    print("   - All files created with proper VitePress frontmatter")
    print("   - Content extracted directly from authoritative PDF sources")

if __name__ == "__main__":
    main()
